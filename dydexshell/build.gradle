apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.peter.source.dydex.dydexshell"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk{
            moduleName "dyloaddex"  //设置库(so)文件名称
            abiFilters "armeabi", "armeabi-v7a", "x86", "arm64-v8a"     //输出指定三种abi体系结构下的so库,如果没有这句的话，lib下面就没有so文件
            ldLibs "log" //增加log的lib库
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets{
        main {
        // 你的源码目录
        jni.srcDir 'src/main/jni'
        jniLibs.srcDir 'src/main/libs'
       }
    }

    task copyshellresource(dependsOn: ['packageRelease']) {
        doLast {
            def rootProjectpath = getRootDir().absolutePath
            def fileName = "classes.dex"
            def fromFile = rootProjectpath + "\\dydexshell\\build\\intermediates\\transforms\\dex\\release\\folders\\1000\\1f\\main\\" + fileName
            def intoFile = rootProjectpath + "\\dydexencry\\resource"
            def appName = "petershell.dex"

            def soFromDir = rootProjectpath + "\\dydexshell\\build\\intermediates\\ndk\\release\\lib"
            def sointoFile = rootProjectpath + "\\dydexencry\\resource\\jni"
            // copy --> rename
            println(new File(intoFile).absolutePath)

            println("=====================build.copyshellresource begin.=========================" + new File(fromFile).exists())
            copy {
                from fromFile
                into intoFile
                rename {
                    appName
                }
            }
            copy {
                from soFromDir
                into sointoFile
            }
            println("=====================build.copyshellresource success.=========================")
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
